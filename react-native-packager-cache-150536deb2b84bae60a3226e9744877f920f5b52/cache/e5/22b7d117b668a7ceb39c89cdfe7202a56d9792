'use strict';

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var R = _interopDefault(require('ramda'));

var log = function log(x) {
  console.log(x);
  return x;
};

var trace = R.curry(function (message, x) {
  console.log(message);
  return x;
});

var toNumber = R.cond([[R.isNil, R.identity], [R.is(Number), R.identity], [R.T, function (x) {
  return Number(x);
}]]);

var toDate = function toDate(number) {
  return R.cond([[R.isNil, R.identity], [R.is(Object), R.identity], [R.T, function (x) {
    return new Date(x);
  }]])(number);
};

var isWithin = R.curry(function (min, max, value) {
  var isNumber = R.is(Number);
  return isNumber(min) && isNumber(max) && isNumber(value) && R.gte(value, min) && R.gte(max, value);
});

var isNotWithin = R.complement(isWithin);

var eqLength = R.eqProps('length');

var random = function random(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
};

var sample = function sample(list) {
  if (R.isNil(list) || R.isEmpty(list)) {
    return null;
  }
  var min = 0;
  var max = list.length - 1;
  return list[random(min, max)];
};

var isNilOrEmpty = R.anyPass([R.isNil, R.isEmpty]);

var isNotNil = R.complement(R.isNil);

var isUndefined = function isUndefined(x) {
  return typeof x === 'undefined';
};

var mapKeys = R.curry(function (fn, obj) {
  return R.pipe(R.toPairs, R.map(R.adjust(fn, 0)), R.fromPairs)(obj);
});

var rangeStep = R.curry(function (step, start, stop) {
  if (step === 0) return null;
  if (step > 0 && stop < start) return null;
  if (step < 0 && stop > start) return null;
  return R.map(function (n) {
    return start + step * n;
  }, R.range(0, 1 + (stop - start) / step >>> 0));
});

var dotPath = R.curry(function (stringPath, obj) {
  var path = R.split('.', stringPath);
  return R.path(path, obj);
});

var startsWith = R.curry(function (subString, fullString) {
  return R.equals(subString, R.take(R.length(subString), fullString));
});

var endsWith = R.curry(function (subString, fullString) {
  return R.equals(subString, R.takeLast(R.length(subString), fullString));
});

var findByProp = R.curry(function (prop, value, source) {
  return R.find(R.propEq(prop, value))(source);
});

var findIndexByProp = R.curry(function (prop, value, source) {
  return R.findIndex(R.propEq(prop, value))(source);
});

var Ramdasauce = {
  log: log,
  trace: trace,
  toNumber: toNumber,
  toDate: toDate,
  isWithin: isWithin,
  isNotWithin: isNotWithin,
  eqLength: eqLength,
  random: random,
  sample: sample,
  isNilOrEmpty: isNilOrEmpty,
  isNotNil: isNotNil,
  isUndefined: isUndefined,
  mapKeys: mapKeys,
  rangeStep: rangeStep,
  dotPath: dotPath,
  startsWith: startsWith,
  endsWith: endsWith,
  findByProp: findByProp,
  findIndexByProp: findIndexByProp
};

module.exports = Ramdasauce;

module.exports = Ramdasauce;