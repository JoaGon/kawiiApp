Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Analytics = undefined;

var _reactNative = require('react-native');

var _promisify = require('../utils/promisify');

var _promisify2 = babelHelpers.interopRequireDefault(_promisify);

var _base = require('./base');

var FirestackAnalytics = _reactNative.NativeModules.FirestackAnalytics;

var Analytics = exports.Analytics = function (_Base) {
  babelHelpers.inherits(Analytics, _Base);

  function Analytics(firestack) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    babelHelpers.classCallCheck(this, Analytics);

    var _this = babelHelpers.possibleConstructorReturn(this, (Analytics.__proto__ || Object.getPrototypeOf(Analytics)).call(this, firestack, options));

    _this._addToFirestackInstance('logEventWithName');
    return _this;
  }

  babelHelpers.createClass(Analytics, [{
    key: 'logEventWithName',
    value: function logEventWithName(name, props) {
      return (0, _promisify2.default)('logEventWithName', FirestackAnalytics)(name, props);
    }
  }, {
    key: 'enable',
    value: function enable() {
      return (0, _promisify2.default)('setEnabled', FirestackAnalytics)(true);
    }
  }, {
    key: 'disable',
    value: function disable() {
      return (0, _promisify2.default)('setEnabled', FirestackAnalytics)(false);
    }
  }, {
    key: 'setUser',
    value: function setUser(id) {
      var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      return (0, _promisify2.default)('setUserId', FirestackAnalytics)(id, properties);
    }
  }, {
    key: 'namespace',
    get: function get() {
      return 'firestack:analytics';
    }
  }]);
  return Analytics;
}(_base.Base);

exports.default = Analytics;