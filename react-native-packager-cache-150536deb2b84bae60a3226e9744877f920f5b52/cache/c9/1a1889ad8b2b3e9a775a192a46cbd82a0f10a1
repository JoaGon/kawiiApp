Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ReduxPersist = require('../Config/ReduxPersist');

var _ReduxPersist2 = babelHelpers.interopRequireDefault(_ReduxPersist);

var _reactNative = require('react-native');

var _reduxPersist = require('redux-persist');

var _StartupRedux = require('../Redux/StartupRedux');

var _StartupRedux2 = babelHelpers.interopRequireDefault(_StartupRedux);

var _DebugConfig = require('../Config/DebugConfig');

var _DebugConfig2 = babelHelpers.interopRequireDefault(_DebugConfig);

var updateReducers = function updateReducers(store) {
  var reducerVersion = _ReduxPersist2.default.reducerVersion;
  var config = _ReduxPersist2.default.storeConfig;
  var startup = function startup() {
    return store.dispatch(_StartupRedux2.default.startup());
  };

  _reactNative.AsyncStorage.getItem('reducerVersion').then(function (localVersion) {
    if (localVersion !== reducerVersion) {
      if (_DebugConfig2.default.useReactotron) {
        console.tron.display({
          name: 'PURGE',
          value: {
            'Old Version:': localVersion,
            'New Version:': reducerVersion
          },
          preview: 'Reducer Version Change Detected',
          important: true
        });
      }

      (0, _reduxPersist.persistStore)(store, config, startup).purge();
      _reactNative.AsyncStorage.setItem('reducerVersion', reducerVersion);
    } else {
      (0, _reduxPersist.persistStore)(store, config, startup);
    }
  }).catch(function () {
    (0, _reduxPersist.persistStore)(store, config, startup);
    _reactNative.AsyncStorage.setItem('reducerVersion', reducerVersion);
  });
};

exports.default = { updateReducers: updateReducers };