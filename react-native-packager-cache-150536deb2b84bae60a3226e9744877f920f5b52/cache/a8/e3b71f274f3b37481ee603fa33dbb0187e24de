Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.selectAvatar = undefined;
exports.startup = startup;

var _effects = require('redux-saga/effects');

var _GithubRedux = require('../Redux/GithubRedux');

var _GithubRedux2 = babelHelpers.interopRequireDefault(_GithubRedux);

var _ramda = require('ramda');

var _marked = [startup].map(regeneratorRuntime.mark);

var selectAvatar = exports.selectAvatar = function selectAvatar(state) {
  return state.github.avatar;
};

function startup(action) {
  var subObject, avatar;
  return regeneratorRuntime.wrap(function startup$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (__DEV__ && console.tron) {
            console.tron.log('Hello, I\'m an example of how to log via Reactotron.');

            console.tron.log({
              message: 'pass objects for better logging',
              someGeneratorFunction: selectAvatar
            });

            subObject = { a: 1, b: [1, 2, 3], c: true };

            subObject.circularDependency = subObject;
            console.tron.display({
              name: 'ðŸ”¥ IGNITE ðŸ”¥',
              preview: 'You should totally expand this',
              value: {
                'ðŸ’ƒ': 'Welcome to the future!',
                subObject: subObject,
                someInlineFunction: function someInlineFunction() {
                  return true;
                },
                someGeneratorFunction: startup,
                someNormalFunction: selectAvatar
              }
            });
          }
          _context.next = 3;
          return (0, _effects.select)(selectAvatar);

        case 3:
          avatar = _context.sent;

          if ((0, _ramda.is)(String, avatar)) {
            _context.next = 7;
            break;
          }

          _context.next = 7;
          return (0, _effects.put)(_GithubRedux2.default.userRequest('GantMan'));

        case 7:
        case 'end':
          return _context.stop();
      }
    }
  }, _marked[0], this);
}