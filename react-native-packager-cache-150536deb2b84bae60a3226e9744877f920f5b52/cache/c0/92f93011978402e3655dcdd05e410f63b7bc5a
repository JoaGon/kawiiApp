Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Authentication = undefined;

var _reactNative = require('react-native');

var _promisify = require('../utils/promisify');

var _promisify2 = babelHelpers.interopRequireDefault(_promisify);

var _base = require('./base');

var FirestackAuth = _reactNative.NativeModules.FirestackAuth;
var FirestackAuthEvt = new _reactNative.NativeEventEmitter(FirestackAuth);

var Authentication = exports.Authentication = function (_Base) {
  babelHelpers.inherits(Authentication, _Base);

  function Authentication(firestack) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    babelHelpers.classCallCheck(this, Authentication);
    return babelHelpers.possibleConstructorReturn(this, (Authentication.__proto__ || Object.getPrototypeOf(Authentication)).call(this, firestack, options));
  }

  babelHelpers.createClass(Authentication, [{
    key: 'listenForAuth',
    value: function listenForAuth(callback) {
      this.log.info('Setting up listenForAuth callback');
      var sub = this._on('listenForAuth', callback, FirestackAuthEvt);
      FirestackAuth.listenForAuth();
      this.log.info('Listening for auth...');
      return (0, _promisify2.default)(function () {
        return sub;
      }, FirestackAuth)(sub);
    }
  }, {
    key: 'unlistenForAuth',
    value: function unlistenForAuth() {
      this.log.info('Unlistening for auth');
      this._off('listenForAuth');
      return (0, _promisify2.default)('unlistenForAuth', FirestackAuth)();
    }
  }, {
    key: 'createUserWithEmail',
    value: function createUserWithEmail(email, password) {
      this.log.info('Creating user with email', email);
      return (0, _promisify2.default)('createUserWithEmail', FirestackAuth)(email, password);
    }
  }, {
    key: 'signInWithEmail',
    value: function signInWithEmail(email, password) {
      return (0, _promisify2.default)('signInWithEmail', FirestackAuth)(email, password);
    }
  }, {
    key: 'signInWithProvider',
    value: function signInWithProvider(provider, authToken, authSecret) {
      return (0, _promisify2.default)('signInWithProvider', FirestackAuth)(provider, authToken, authSecret);
    }
  }, {
    key: 'signInWithCustomToken',
    value: function signInWithCustomToken(customToken) {
      return (0, _promisify2.default)('signInWithCustomToken', FirestackAuth)(customToken);
    }
  }, {
    key: 'signInAnonymously',
    value: function signInAnonymously() {
      return (0, _promisify2.default)('signInAnonymously', FirestackAuth)();
    }
  }, {
    key: 'reauthenticateWithCredentialForProvider',
    value: function reauthenticateWithCredentialForProvider(provider, token, secret) {
      return (0, _promisify2.default)('reauthenticateWithCredentialForProvider', FirestackAuth)(provider, token, secret);
    }
  }, {
    key: 'updateUserEmail',
    value: function updateUserEmail(email) {
      return (0, _promisify2.default)('updateUserEmail', FirestackAuth)(email);
    }
  }, {
    key: 'updatePassword',
    value: function updatePassword(password) {
      return (0, _promisify2.default)('updateUserPassword', FirestackAuth)(password);
    }
  }, {
    key: 'sendPasswordResetWithEmail',
    value: function sendPasswordResetWithEmail(email) {
      return (0, _promisify2.default)('sendPasswordResetWithEmail', FirestackAuth)(email);
    }
  }, {
    key: 'deleteUser',
    value: function deleteUser() {
      return (0, _promisify2.default)('deleteUser', FirestackAuth)();
    }
  }, {
    key: 'getToken',
    value: function getToken() {
      return (0, _promisify2.default)('getToken', FirestackAuth)();
    }
  }, {
    key: 'updateUserProfile',
    value: function updateUserProfile(obj) {
      return (0, _promisify2.default)('updateUserProfile', FirestackAuth)(obj);
    }
  }, {
    key: 'signOut',
    value: function signOut() {
      return (0, _promisify2.default)('signOut', FirestackAuth)();
    }
  }, {
    key: 'getCurrentUser',
    value: function getCurrentUser() {
      return (0, _promisify2.default)('getCurrentUser', FirestackAuth)();
    }
  }, {
    key: 'namespace',
    get: function get() {
      return 'firestack:auth';
    }
  }]);
  return Authentication;
}(_base.Base);

exports.default = Authentication;