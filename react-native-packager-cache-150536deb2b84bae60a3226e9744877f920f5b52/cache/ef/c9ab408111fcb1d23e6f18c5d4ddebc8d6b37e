Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Presence = undefined;

var _invariant = require('invariant');

var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

var _promisify = require('../utils/promisify');

var _promisify2 = babelHelpers.interopRequireDefault(_promisify);

var _base = require('./base');

var PresenceRef = function (_ReferenceBase) {
  babelHelpers.inherits(PresenceRef, _ReferenceBase);

  function PresenceRef(presence, ref, pathParts) {
    babelHelpers.classCallCheck(this, PresenceRef);

    var _this = babelHelpers.possibleConstructorReturn(this, (PresenceRef.__proto__ || Object.getPrototypeOf(PresenceRef)).call(this, presence.firestack));

    _this.presence = presence;
    var db = _this.firestack.database;
    _this.ref = ref;
    _this.lastOnlineRef = _this.ref.child('lastOnline');

    _this._connectedRef = db.ref('.info/connected');
    _this._pathParts = pathParts;

    _this._onConnect = [];
    return _this;
  }

  babelHelpers.createClass(PresenceRef, [{
    key: 'setOnline',
    value: function setOnline() {
      var _this2 = this;

      this.ref.setAt({ online: true });
      this._connectedRef.on('value', function (snapshot) {
        var val = snapshot.val();
        if (val) {
          _this2.ref.setAt({
            online: true
          }).then(function () {
            _this2._disconnect();

            _this2._onConnect.forEach(function (fn) {
              if (fn && typeof fn === 'function') {
                fn.bind(_this2)(_this2.ref);
              }
            });
          });
        }
      });
      return this;
    }
  }, {
    key: 'setOffline',
    value: function setOffline() {
      var _this3 = this;

      if (this.ref) {
        this.ref.setAt({ online: false }).then(function () {
          return _this3.ref.off('value');
        });
        this.presence.off(this._pathParts);
      }
      return this;
    }
  }, {
    key: '_disconnect',
    value: function _disconnect() {
      if (this.ref) {
        this.ref.onDisconnect().setValue({ online: false });

        this.lastOnlineRef.onDisconnect().setValue(this.firestack.ServerValue.TIMESTAMP);
      }
    }
  }, {
    key: '_pathKey',
    value: function _pathKey() {
      return this._pathParts.join('/');
    }
  }, {
    key: 'onConnect',
    value: function onConnect(cb) {
      this._onConnect.push(cb);
      return this;
    }
  }]);
  return PresenceRef;
}(_base.ReferenceBase);

var Presence = exports.Presence = function (_Base) {
  babelHelpers.inherits(Presence, _Base);

  function Presence(firestack) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    babelHelpers.classCallCheck(this, Presence);

    var _this4 = babelHelpers.possibleConstructorReturn(this, (Presence.__proto__ || Object.getPrototypeOf(Presence)).call(this, firestack, options));

    _this4.instances = {};
    _this4.path = ['/presence/connections'];
    return _this4;
  }

  babelHelpers.createClass(Presence, [{
    key: 'on',
    value: function on(key) {
      (0, _invariant2.default)(key, 'You must supply a key for presence');
      var path = this.path.concat(key);
      var pathKey = this._presenceKey(path);
      if (!this.instances[pathKey]) {
        var _ref = this.firestack.database.ref(pathKey);
        this.log.debug('Created new presence object for ', pathKey);
        var inst = new PresenceRef(this, _ref, path);

        this.instances[pathKey] = inst;
      }

      return this.instances[pathKey];
    }
  }, {
    key: 'off',
    value: function off(path) {
      var pathKey = this._presenceKey(path);
      if (this.instances[pathKey]) {
        delete this.instances[pathKey];
      }
    }
  }, {
    key: 'ref',
    value: function ref(dbRef, path) {
      return new PresenceRef(this, dbRef, path);
    }
  }, {
    key: '_presenceKey',
    value: function _presenceKey(path) {
      return (path || this.path).join('/');
    }
  }, {
    key: 'namespace',
    get: function get() {
      return 'firestack:presence';
    }
  }]);
  return Presence;
}(_base.Base);

exports.default = Presence;