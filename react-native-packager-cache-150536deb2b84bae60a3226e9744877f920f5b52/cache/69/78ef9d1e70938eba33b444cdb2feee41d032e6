Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CloudMessaging = undefined;

var _reactNative = require('react-native');

var _promisify = require('../utils/promisify');

var _promisify2 = babelHelpers.interopRequireDefault(_promisify);

var _base = require('./base');

var FirestackCloudMessaging = _reactNative.NativeModules.FirestackCloudMessaging;
var FirestackCloudMessagingEvt = new _reactNative.NativeEventEmitter(FirestackCloudMessaging);

var defaultPermissions = {
    'badge': 1,
    'sound': 2,
    'alert': 3
};

var CloudMessaging = exports.CloudMessaging = function (_Base) {
    babelHelpers.inherits(CloudMessaging, _Base);

    function CloudMessaging(firestack) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        babelHelpers.classCallCheck(this, CloudMessaging);

        var _this = babelHelpers.possibleConstructorReturn(this, (CloudMessaging.__proto__ || Object.getPrototypeOf(CloudMessaging)).call(this, firestack, options));

        _this.requestedPermissions = babelHelpers.extends({}, defaultPermissions, options.permissions);
        return _this;
    }

    babelHelpers.createClass(CloudMessaging, [{
        key: 'getToken',
        value: function getToken() {
            this.log.info('getToken for cloudMessaging');
            return (0, _promisify2.default)('getToken', FirestackCloudMessaging)();
        }
    }, {
        key: 'requestPermissions',
        value: function requestPermissions() {
            var requestedPermissions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            if (_reactNative.Platform.OS === 'ios') {
                var mergedRequestedPermissions = babelHelpers.extends({}, this.requestedPermissions, requestedPermissions);
                return (0, _promisify2.default)('requestPermissions', FirestackCloudMessaging)(mergedRequestedPermissions).then(function (perms) {

                    return perms;
                });
            }
        }
    }, {
        key: 'sendMessage',
        value: function sendMessage() {
            var details = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'local';

            var methodName = 'send' + (type == 'local' ? 'Local' : 'Remote');
            this.log.info('sendMessage', methodName, details);
            return (0, _promisify2.default)(methodName, FirestackCloudMessaging)(details);
        }
    }, {
        key: 'scheduleMessage',
        value: function scheduleMessage() {
            var details = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'local';

            var methodName = 'schedule' + (type == 'local' ? 'Local' : 'Remote');
            return (0, _promisify2.default)(methodName, FirestackCloudMessaging)(details);
        }
    }, {
        key: 'send',
        value: function send(senderId, messageId, messageType, msg) {
            return (0, _promisify2.default)('send', FirestackCloudMessaging)(senderId, messageId, messageType, msg);
        }
    }, {
        key: 'listenForTokenRefresh',
        value: function listenForTokenRefresh(callback) {
            this.log.info('Setting up listenForTokenRefresh callback');
            var sub = this._on('FirestackRefreshToken', callback, FirestackCloudMessagingEvt);
            return (0, _promisify2.default)(function () {
                return sub;
            }, FirestackCloudMessaging)(sub);
        }
    }, {
        key: 'unlistenForTokenRefresh',
        value: function unlistenForTokenRefresh() {
            this.log.info('Unlistening for TokenRefresh');
            this._off('FirestackRefreshToken');
        }
    }, {
        key: 'subscribeToTopic',
        value: function subscribeToTopic(topic) {
            this.log.info('subscribeToTopic ' + topic);
            var finalTopic = '/topics/' + topic;
            return (0, _promisify2.default)('subscribeToTopic', FirestackCloudMessaging)(finalTopic);
        }
    }, {
        key: 'unsubscribeFromTopic',
        value: function unsubscribeFromTopic(topic) {
            this.log.info('unsubscribeFromTopic ' + topic);
            var finalTopic = '/topics/' + topic;
            return (0, _promisify2.default)('unsubscribeFromTopic', FirestackCloudMessaging)(finalTopic);
        }
    }, {
        key: 'onRemoteMessage',
        value: function onRemoteMessage(callback) {
            this.log.info('On remote message callback');
            var sub = this._on('messaging_remote_event_received', callback, FirestackCloudMessagingEvt);
            return (0, _promisify2.default)(function () {
                return sub;
            }, FirestackCloudMessaging)(sub);
        }
    }, {
        key: 'onLocalMessage',
        value: function onLocalMessage(callback) {
            this.log.info('on local callback');
            var sub = this._on('messaging_local_event_received', callback, FirestackCloudMessagingEvt);
            return (0, _promisify2.default)(function () {
                return sub;
            }, FirestackCloudMessaging)(sub);
        }
    }, {
        key: 'listenForReceiveNotification',
        value: function listenForReceiveNotification(callback) {
            this.log.info('Setting up listenForReceiveNotification callback');
            var sub = this._on('FirestackReceiveNotification', callback, FirestackCloudMessagingEvt);
            return (0, _promisify2.default)(function () {
                return sub;
            }, FirestackCloudMessaging)(sub);
        }
    }, {
        key: 'unlistenForReceiveNotification',
        value: function unlistenForReceiveNotification() {
            this.log.info('Unlistening for ReceiveNotification');
            this._off('FirestackRefreshToken');
        }
    }, {
        key: 'listenForReceiveUpstreamSend',
        value: function listenForReceiveUpstreamSend(callback) {
            this.log.info('Setting up send callback');
            var sub = this._on('FirestackUpstreamSend', callback, FirestackCloudMessagingEvt);
            return (0, _promisify2.default)(function () {
                return sub;
            }, FirestackCloudMessaging)(sub);
        }
    }, {
        key: 'unlistenForReceiveUpstreamSend',
        value: function unlistenForReceiveUpstreamSend() {
            this.log.info('Unlistening for send');
            this._off('FirestackUpstreamSend');
        }
    }, {
        key: 'namespace',
        get: function get() {
            return 'firestack:cloudMessaging';
        }
    }]);
    return CloudMessaging;
}(_base.Base);

exports.default = CloudMessaging;